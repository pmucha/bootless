//
// Grid system
// --------------------------------------------------

//**
//*  Substitute for `.container` CSS class. Creates a centered container usually for `.row`-s.
//*  Usage: There are specific containers for specific devices, eg `#BL>.container("tablet")`
//*  for `@media (min-width: @screen-tablet) and (max-width: @screen-tablet-max) { ... }`.
//*  Since the `#BL>.col(@columns)` layout is fluid you can set up whatever container size you want,
//*  eg. `#BL>.container(500px)`, `#BL>.container(80%)` or whatever unit size you wish to use.
//*
//*  @param width "tablet"|"desktop"|"large-desktop"|standard unit width
//**
.container(@width) when (isstring(@width)) and (@width = "tablet") {
    max-width: @container-tablet;
    margin-left: auto;
    margin-right: auto;
}
.container(@width) when (isstring(@width)) and (@width = "desktop") {
    max-width: @container-desktop;
    margin-left: auto;
    margin-right: auto;
}
.container(@width) when (isstring(@width)) and (@width = "large-desktop") {
    max-width: @container-large-desktop;
    margin-left: auto;
    margin-right: auto;
}
// why not: when ispixel(), ispercentage() etc.?
// if you simply enter .container(800) either way it won't work and won't raise error
.container(@width) when (isnumber(@width)) {
    max-width: @width;
    margin-left: auto;
    margin-right: auto;
}

//**
//* Substitue for `.row` CSS class. Creates a wrapper for a series of `#BL>.col`-s.
//* Usage: Simply enter `#BL>row()` to wrap the inner columns.
//*
//* The code for the row is much simplified, since it does not use the gutter,
//* and it does not rely on CSS classes anymore the only thing that is left is
//* the clearfix. If you want to have the gutter revert to Bootstrap's
//* `.make-row()` and `.make-column()` mixins.
//**
.row() {
    // Then clear the floated columns
    .clearfix();
}

//**
//* Substitue for `.col-1` to `.col-12` CSS classes. Generates the columns.
//* Usage: Simply enter `#BL>col(@columns)` to generate the column.
//* The parameter defines how wide should the column be. If the whole
//* row can be divided to @grid-columns (default 12) parts, then your column
//* will have @columns of them.
//*
//* The idea is the same as in Bootstrap, and the code is roughly the same,
//* except *it does not use the gutter* (inner left/right padding). If you
//* want to have it revert to Bootstrap's `.make-column()` and `.make-row()` mixins.
//*
//* @param columns colspan of the column, from 1 to @grid-columns (default 12)
//**
.col(@columns) when (isnumber(@columns)) and (@columns > 0) {
    position: relative;
    float: left;
    width: percentage((@columns / @grid-columns));
    // Prevent columns from collapsing when empty
    min-height: 1px;
}

//**
//* Substitue for `.col-offset` CSS class. Generates column offset.
//* This means an empty space on the left of your column. Counted the same as
//* in generating columns.
//*
//* @param columns span of the offset
//**
.col-offset(@columns) when (@columns > 0) {
    margin-left: percentage((@columns / @grid-columns));
}

//**
//* Substitute for `.col-push` CSS class. Changes the visual horizontal position
//* of the column. When used with `.col-pull()` you can change position of columns
//* for the user inspite of their position in DOM.
//*
//* @param columns span of the left push
//**
.col-push(@columns) when (@columns > 0) {
    left: percentage((@columns / @grid-columns));
}

//**
//* Substitute for `.col-pull` CSS class.
//*
//* @param columns span of the left pull
//* @see .col-push
//**
.col-pull(@columns) when (@columns > 0) {
    right: percentage((@columns / @grid-columns));
}